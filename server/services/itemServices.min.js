const{pool:pool}=require("../db"),jwt=require("jsonwebtoken");exports.getItems=async function(req,res){try{const items=await pool.query("SELECT * FROM item");res.status(200).json({status:"success",data:items.rows})}catch(err){res.status(400).json({status:"error",message:"何かエラーがおきました"})}},exports.getItem=async function(req,res){try{const{id:id}=req.params,numberId=parseInt(id),item=await pool.query("SELECT * FROM item WHERE id =$1",[numberId]),result=item.rows[0];if(!result)return res.status(400).json({status:"error",message:"データが存在しません"});res.status(200).json({status:"success",data:result})}catch(err){console.log(err),res.status(400).json({status:"error",message:"エラーが起こりました"})}},exports.createItem=async function(req,res){const{token:token,imgUrl:imgUrl,price:price,description:description}=req.body;let id;try{id=jwt.verify(token,process.env.JWT_ACCESS_TOKEN).id,console.log("decoded",id)}catch(err){console.log(err)}const result=await db.query("INSERT INTO item (img_url, price, description, user_id ) VALUES ($1, $2, $3, $4) returning *;",[imgUrl,price,description,id]);if(0===result.rows.length)return res.status(400).json({status:"error",message:"データを追加できませんでした"});res.status(200).json({status:"success",data:result.rows[0]})},exports.updateItem=function(req,res){const{id:id}=req.params,numberId=parseInt(id);(numberId>items.length||numberId<=0)&&res.status(404).json({status:"fail",message:"指定されたIDの値が大きすぎます"}),res.status(200).json({status:"success"})},exports.deleteItem=function(req,res){const{id:id}=req.params,numberId=parseInt(id);(numberId>items.length||numberId<=0)&&res.status(404).json({status:"fail",message:"指定されたIDの値が大きすぎます"}),res.status(200).json({status:"success"})};